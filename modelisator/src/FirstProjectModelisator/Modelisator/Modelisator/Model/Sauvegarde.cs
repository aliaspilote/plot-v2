///////////////////////////////////////////////////////////
//  Sauvegarde.cs
//  Implementation of the Class Sauvegarde
//  Generated by Enterprise Architect
//  Created on:      17-juin-2015 09:38:57
//  Original author: Quentin
///////////////////////////////////////////////////////////
using System;
using System.Timers;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Modelisator.Model;
using System.IO;

namespace Modelisator.Model {
	public class Sauvegarde {

        private string      m_Chemin;
        private DateTime    m_Date;
        private string      m_Nom;

		public Produit m_Produit;

		public Sauvegarde(){		}

		public string Chemin{
			get{
                return m_Chemin;
			}
			set{
                m_Chemin = value;
			}
		}

        public DateTime Date
        {
			get{
                return m_Date;
			}
			set{
                m_Date = value;
			}
		}

        public void export()
        {
            string text;


            StreamWriter sw = new StreamWriter(m_Chemin);//création du fichier
            sw.WriteLine("Indice de matrice;Grandeur Physique;Unité;Valeur;Description;Calcule;Selectionnne;EstPremier");
            foreach (KeyValuePair<string, GrandeurPhysique> gp in Produit.GrandeurPhysiques)
            {

                text = gp.Value.iM + ";" + gp.Value.Nom + ";" + gp.Value.Unite + ";" + gp.Value.Valeur + ";" + gp.Value.Description + ";" + gp.Value.Calcule + ";" + gp.Value.Selectionne + ";" + gp.Value.EstPremier;
                sw.WriteLine("{0}", text);//enregistrement de la liste gp.Value.Value dans le fichier 
            }

            sw.Close();


        }

        public void import()
        {
            var reader = new StreamReader(File.OpenRead(m_Chemin));
            reader.ReadLine(); //On passe les headers du csv.
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                var values = line.Split(';');
                /*GrandeurPhysique gp = new GrandeurPhysique();
                gp.iM = Convert.ToInt16(values[0]);
                gp.Nom = values[1];
                gp.Unite = values[2];
                gp.Valeur = Convert.ToDouble(values[3]);
                gp.Description = values[4];
                gp.Calcule = Convert.ToBoolean(values[5]);
                gp.Selectionne = Convert.ToBoolean(values[6]);
                gp.EstPremier = Convert.ToBoolean(values[7]);
                Produit.GrandeurPhysiques.Add(gp.Nom, gp);*/


                Produit.GrandeurPhysiques[values[1]].iM = Convert.ToInt16(values[0]);
                Produit.GrandeurPhysiques[values[1]].Nom = values[1];
                Produit.GrandeurPhysiques[values[1]].Unite = values[2];
                Produit.GrandeurPhysiques[values[1]].Valeur = Convert.ToDouble(values[3]);
                Produit.GrandeurPhysiques[values[1]].Description = values[4];
                Produit.GrandeurPhysiques[values[1]].Calcule = Convert.ToBoolean(values[5]);
                Produit.GrandeurPhysiques[values[1]].Selectionne = Convert.ToBoolean(values[6]);
                Produit.GrandeurPhysiques[values[1]].EstPremier = Convert.ToBoolean(values[7]);

                //Produit.GrandeurPhysiques.Add(gp.Nom, gp);

                /*
                Produit.GrandeurPhysiques[values[1]].Valeur = Convert.ToDouble(values[3]);
                Produit.GrandeurPhysiques[values[1]].Calcule = Convert.ToBoolean(values[5]);
                Produit.GrandeurPhysiques[values[1]].Entree = Convert.ToBoolean(values[8888]);
                */
            }


        }

		public string Nom{
			get{
                return m_Nom;
			}
			set{
                m_Nom = value;
			}
		}


        internal void import(string filename)
        {
            throw new NotImplementedException();
        }

        internal void export(string filename)
        {
            throw new NotImplementedException();
        }
    }//end Sauvegarde

}//end namespace Modelisator.Model